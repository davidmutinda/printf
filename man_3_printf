PRINTF(3)                       Linux Programmer's Manual                      PRINTF(3)

NAME
       _printf

SYNOPSIS
       #include "main.h"

       int _printf(const char *format, ...);

DESCRIPTION
 The printf function writes the output under the control of a format string that specifies how subsequent arguments (or arguments accessed via the variable-length argument facilities of stdarg(3)) are converted for output.
 
  Format of the format string
       The format string is a character string, beginning and ending in its initial shift state, if any.  The format string is composed of zero or  more  directives:  ordinary  characters
       (not %), which are copied unchanged to the output stream; and conversion specifications, each of which results in fetching zero or more subsequent arguments.  Each conversion spec‐
       ification is introduced by the character %, and ends with a conversion specifier.  In between there may be (in this order) zero or more flags, an optional minimum field  width,  an
       optional precision and an optional length modifier.

       The arguments must correspond properly (after type promotion) with the conversion specifier.  By default, the arguments are used in the order given, where each '*' (see Field width
       and Precision below) and each conversion specifier asks for the next argument (and it is an error if insufficiently many arguments are given).   One  can  also  specify  explicitly
       which  argument is taken, at each place where an argument is required, by writing "%m$" instead of '%' and "*m$" instead of '*', where the decimal integer m denotes the position in
       the argument list of the desired argument, indexed starting from 1.  Thus,

           _printf("%*d", width, num);

       and

           _printf("%2$*1$d", width, num);

       are equivalent.  The second style allows repeated references to the same argument.  The C99 standard does not include the style using '$', which comes from the Single UNIX Specifi‐
       cation.  If the style using '$' is used, it must be used throughout for all conversions taking an argument and all width and precision arguments, but it may be mixed with "%%" for‐
       mats, which do not consume an argument.  There may be no gaps in the numbers of arguments specified using '$'; for example, if arguments 1 and 3 are specified, argument 2 must also
       be specified somewhere in the format string.

       For  some numeric conversions a radix character ("decimal point") or thousands' grouping character is used.  The actual character used depends on the LC_NUMERIC part of the locale.
       (See setlocale(3).)  The POSIX locale uses '.' as radix character, and does not have a grouping character.  Thus,

               _printf("%'.2f", 1234567.89);

 Flag characters
       The character % is followed by zero or more of the following flags:

       #      The value should be converted to an "alternate form".  For o conversions, the first character of the output string is made zero (by prefixing a 0 if  it  was  not  zero  al‐
              ready).   For  x and X conversions, a nonzero result has the string "0x" (or "0X" for X conversions) prepended to it.  For a, A, e, E, f, F, g, and G conversions, the result
              will always contain a decimal point, even if no digits follow it (normally, a decimal point appears in the results of those conversions only if a digit follows).  For g  and
              G conversions, trailing zeros are not removed from the result as they would otherwise be.  For other conversions, the result is undefined.

       0      The  value should be zero padded.  For d, i, o, u, x, X, a, A, e, E, f, F, g, and G conversions, the converted value is padded on the left with zeros rather than blanks.  If
              the 0 and - flags both appear, the 0 flag is ignored.  If a precision is given with a numeric conversion (d, i, o, u, x, and X), the 0 flag is ignored.   For  other  conver‐
              sions, the behavior is undefined.

       -      The converted value is to be left adjusted on the field boundary.  (The default is right justification.)  The converted value is padded on the right with blanks, rather than
              on the left with blanks or zeros.  A - overrides a 0 if both are given.

       ' '    (a space) A blank should be left before a positive number (or empty string) produced by a signed conversion.

       +      A sign (+ or -) should always be placed before a number produced by a signed conversion.  By default, a sign is used only for negative numbers.  A +  overrides  a  space  if
              both are used.

       The five flag characters above are defined in the C99 standard.  The Single UNIX Specification specifies one further flag character.

       '      For  decimal  conversion  (i, d, u, f, F, g, G) the output is to be grouped with thousands' grouping characters if the locale information indicates any.  (See setlocale(3).)
              Note that many versions of gcc(1) cannot parse this option and will issue a warning.  (SUSv2 did not include %'F, but SUSv3 added it.)

       glibc 2.2 adds one further flag character.

       I      For decimal integer conversion (i, d, u) the output uses the locale's alternative output digits, if any.  For example, since glibc 2.2.3 this will give  Arabic-Indic  digits
              in the Persian ("fa_IR") locale.

